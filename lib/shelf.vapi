/* shelf.vapi generated by valac 0.20.1.4-f5a54, do not modify. */

namespace Shelf {
	namespace Drawing {
		[CCode (cheader_filename = "shelf.h")]
		public class DockRenderer : GLib.Object {
			public DockRenderer (Shelf.DockController controller);
			public bool draw (Cairo.Context cr);
			public Shelf.DockController controller { private get; construct; }
		}
		[CCode (cheader_filename = "shelf.h")]
		public class TabRenderer : GLib.Object {
			public TabRenderer ();
			public void draw (Cairo.Context cr, int position);
		}
	}
	namespace Factories {
		[CCode (cheader_filename = "shelf.h")]
		public abstract class AbstractMain : GLib.Object {
			protected static bool DEBUG;
			protected static bool VERBOSE;
			protected Gtk.Application application;
			protected string exec_name;
			protected string program_name;
			protected const GLib.OptionEntry[] options;
			public AbstractMain ();
			protected virtual void create_controller ();
			protected virtual bool initialize_libraries (ref unowned string[] args);
			protected virtual void initialize_program ();
			protected virtual bool parse_commandline (ref unowned string[] args);
			public virtual int run (ref unowned string[] args);
			protected virtual void set_options ();
			protected signal void initialized ();
		}
		[CCode (cheader_filename = "shelf.h")]
		public class Factory : GLib.Object {
			public static Shelf.Factories.ItemFactory item_factory;
			public static Shelf.Factories.AbstractMain main;
			public Factory ();
			public static void init (Shelf.Factories.AbstractMain main_class, Shelf.Factories.ItemFactory item);
		}
		[CCode (cheader_filename = "shelf.h")]
		public class ItemFactory : GLib.Object {
			public ItemFactory ();
		}
	}
	namespace Items {
		[CCode (cheader_filename = "shelf.h")]
		public class Tab : GLib.Object {
			public Tab (Shelf.Items.TabManager manager);
			public void draw (Cairo.Context cr, int position);
			public Shelf.Items.TabManager tab_manager { private get; construct; }
		}
		[CCode (cheader_filename = "shelf.h")]
		public class TabManager : GLib.Object {
			public TabManager (Shelf.DockController controller);
			public void draw (Cairo.Context cr);
			public void populate ();
			public Shelf.DockController controller { private get; construct; }
		}
	}
	namespace System {
		[CCode (cheader_filename = "shelf.h")]
		public class DockPositionManager : GLib.Object {
			public DockPositionManager (Shelf.DockController controller);
			public void initialize ();
			public Shelf.DockController controller { private get; construct; }
		}
		[CCode (cheader_filename = "shelf.h")]
		public class Logger : GLib.Object {
			public static void initialize (string app_name);
			public static void notification (string msg, string icon = "");
			public static void verbose (string msg, ...);
			public static Shelf.System.LogLevel DisplayLevel { get; set; }
		}
		[CCode (cheader_filename = "shelf.h")]
		public enum LogLevel {
			VERBOSE,
			DEBUG,
			INFO,
			NOTIFY,
			WARN,
			ERROR,
			FATAL
		}
	}
	namespace Widgets {
		[CCode (cheader_filename = "shelf.h")]
		public class CompositedWindow : Gtk.Window {
			public CompositedWindow ();
			public override bool draw (Cairo.Context cr);
			public CompositedWindow.with_type (Gtk.WindowType window_type);
		}
		[CCode (cheader_filename = "shelf.h")]
		public class DockWindow : Shelf.Widgets.CompositedWindow {
			public DockWindow (Shelf.DockController controller);
			public override bool button_press_event (Gdk.EventButton event);
			public override bool button_release_event (Gdk.EventButton event);
			public override bool draw (Cairo.Context cr);
			public override bool enter_notify_event (Gdk.EventCrossing event);
			public override bool leave_notify_event (Gdk.EventCrossing event);
			public override bool motion_notify_event (Gdk.EventMotion event);
			public override bool scroll_event (Gdk.EventScroll event);
			public Shelf.DockController controller { private get; construct; }
		}
	}
	[CCode (cheader_filename = "shelf.h")]
	public class DockController : GLib.Object {
		public Shelf.System.DockPositionManager position_manager;
		public Shelf.Drawing.DockRenderer renderer;
		public Shelf.Items.TabManager tab_manager;
		public Shelf.Widgets.DockWindow window;
		public DockController ();
	}
}
