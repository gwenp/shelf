/* shelf.h generated by valac 0.20.1.4-f5a54, the Vala compiler, do not modify */


#ifndef __SHELF_H__
#define __SHELF_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <cairo.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>
#include <gdk-pixbuf/gdk-pixbuf.h>

G_BEGIN_DECLS


#define SHELF_FACTORIES_TYPE_ABSTRACT_MAIN (shelf_factories_abstract_main_get_type ())
#define SHELF_FACTORIES_ABSTRACT_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN, ShelfFactoriesAbstractMain))
#define SHELF_FACTORIES_ABSTRACT_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN, ShelfFactoriesAbstractMainClass))
#define SHELF_FACTORIES_IS_ABSTRACT_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN))
#define SHELF_FACTORIES_IS_ABSTRACT_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN))
#define SHELF_FACTORIES_ABSTRACT_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN, ShelfFactoriesAbstractMainClass))

typedef struct _ShelfFactoriesAbstractMain ShelfFactoriesAbstractMain;
typedef struct _ShelfFactoriesAbstractMainClass ShelfFactoriesAbstractMainClass;
typedef struct _ShelfFactoriesAbstractMainPrivate ShelfFactoriesAbstractMainPrivate;

#define SHELF_FACTORIES_TYPE_FACTORY (shelf_factories_factory_get_type ())
#define SHELF_FACTORIES_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_FACTORIES_TYPE_FACTORY, ShelfFactoriesFactory))
#define SHELF_FACTORIES_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_FACTORIES_TYPE_FACTORY, ShelfFactoriesFactoryClass))
#define SHELF_FACTORIES_IS_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_FACTORIES_TYPE_FACTORY))
#define SHELF_FACTORIES_IS_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_FACTORIES_TYPE_FACTORY))
#define SHELF_FACTORIES_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_FACTORIES_TYPE_FACTORY, ShelfFactoriesFactoryClass))

typedef struct _ShelfFactoriesFactory ShelfFactoriesFactory;
typedef struct _ShelfFactoriesFactoryClass ShelfFactoriesFactoryClass;
typedef struct _ShelfFactoriesFactoryPrivate ShelfFactoriesFactoryPrivate;

#define SHELF_FACTORIES_TYPE_ITEM_FACTORY (shelf_factories_item_factory_get_type ())
#define SHELF_FACTORIES_ITEM_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_FACTORIES_TYPE_ITEM_FACTORY, ShelfFactoriesItemFactory))
#define SHELF_FACTORIES_ITEM_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_FACTORIES_TYPE_ITEM_FACTORY, ShelfFactoriesItemFactoryClass))
#define SHELF_FACTORIES_IS_ITEM_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_FACTORIES_TYPE_ITEM_FACTORY))
#define SHELF_FACTORIES_IS_ITEM_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_FACTORIES_TYPE_ITEM_FACTORY))
#define SHELF_FACTORIES_ITEM_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_FACTORIES_TYPE_ITEM_FACTORY, ShelfFactoriesItemFactoryClass))

typedef struct _ShelfFactoriesItemFactory ShelfFactoriesItemFactory;
typedef struct _ShelfFactoriesItemFactoryClass ShelfFactoriesItemFactoryClass;
typedef struct _ShelfFactoriesItemFactoryPrivate ShelfFactoriesItemFactoryPrivate;

#define SHELF_ITEMS_TYPE_TAB (shelf_items_tab_get_type ())
#define SHELF_ITEMS_TAB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_ITEMS_TYPE_TAB, ShelfItemsTab))
#define SHELF_ITEMS_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_ITEMS_TYPE_TAB, ShelfItemsTabClass))
#define SHELF_ITEMS_IS_TAB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_ITEMS_TYPE_TAB))
#define SHELF_ITEMS_IS_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_ITEMS_TYPE_TAB))
#define SHELF_ITEMS_TAB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_ITEMS_TYPE_TAB, ShelfItemsTabClass))

typedef struct _ShelfItemsTab ShelfItemsTab;
typedef struct _ShelfItemsTabClass ShelfItemsTabClass;
typedef struct _ShelfItemsTabPrivate ShelfItemsTabPrivate;

#define SHELF_DRAWING_TYPE_TAB_RENDERER (shelf_drawing_tab_renderer_get_type ())
#define SHELF_DRAWING_TAB_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_DRAWING_TYPE_TAB_RENDERER, ShelfDrawingTabRenderer))
#define SHELF_DRAWING_TAB_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_DRAWING_TYPE_TAB_RENDERER, ShelfDrawingTabRendererClass))
#define SHELF_DRAWING_IS_TAB_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_DRAWING_TYPE_TAB_RENDERER))
#define SHELF_DRAWING_IS_TAB_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_DRAWING_TYPE_TAB_RENDERER))
#define SHELF_DRAWING_TAB_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_DRAWING_TYPE_TAB_RENDERER, ShelfDrawingTabRendererClass))

typedef struct _ShelfDrawingTabRenderer ShelfDrawingTabRenderer;
typedef struct _ShelfDrawingTabRendererClass ShelfDrawingTabRendererClass;

#define SHELF_ITEMS_TYPE_TAB_MANAGER (shelf_items_tab_manager_get_type ())
#define SHELF_ITEMS_TAB_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_ITEMS_TYPE_TAB_MANAGER, ShelfItemsTabManager))
#define SHELF_ITEMS_TAB_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_ITEMS_TYPE_TAB_MANAGER, ShelfItemsTabManagerClass))
#define SHELF_ITEMS_IS_TAB_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_ITEMS_TYPE_TAB_MANAGER))
#define SHELF_ITEMS_IS_TAB_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_ITEMS_TYPE_TAB_MANAGER))
#define SHELF_ITEMS_TAB_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_ITEMS_TYPE_TAB_MANAGER, ShelfItemsTabManagerClass))

typedef struct _ShelfItemsTabManager ShelfItemsTabManager;
typedef struct _ShelfItemsTabManagerClass ShelfItemsTabManagerClass;
typedef struct _ShelfItemsTabManagerPrivate ShelfItemsTabManagerPrivate;

#define SHELF_TYPE_DOCK_CONTROLLER (shelf_dock_controller_get_type ())
#define SHELF_DOCK_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_TYPE_DOCK_CONTROLLER, ShelfDockController))
#define SHELF_DOCK_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_TYPE_DOCK_CONTROLLER, ShelfDockControllerClass))
#define SHELF_IS_DOCK_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_TYPE_DOCK_CONTROLLER))
#define SHELF_IS_DOCK_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_TYPE_DOCK_CONTROLLER))
#define SHELF_DOCK_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_TYPE_DOCK_CONTROLLER, ShelfDockControllerClass))

typedef struct _ShelfDockController ShelfDockController;
typedef struct _ShelfDockControllerClass ShelfDockControllerClass;

#define SHELF_SYSTEM_TYPE_LOG_LEVEL (shelf_system_log_level_get_type ())

#define SHELF_SYSTEM_TYPE_LOGGER (shelf_system_logger_get_type ())
#define SHELF_SYSTEM_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_LOGGER, ShelfSystemLogger))
#define SHELF_SYSTEM_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_LOGGER, ShelfSystemLoggerClass))
#define SHELF_SYSTEM_IS_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_LOGGER))
#define SHELF_SYSTEM_IS_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_LOGGER))
#define SHELF_SYSTEM_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_LOGGER, ShelfSystemLoggerClass))

typedef struct _ShelfSystemLogger ShelfSystemLogger;
typedef struct _ShelfSystemLoggerClass ShelfSystemLoggerClass;
typedef struct _ShelfSystemLoggerPrivate ShelfSystemLoggerPrivate;

#define SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER (shelf_system_dock_position_manager_get_type ())
#define SHELF_SYSTEM_DOCK_POSITION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER, ShelfSystemDockPositionManager))
#define SHELF_SYSTEM_DOCK_POSITION_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER, ShelfSystemDockPositionManagerClass))
#define SHELF_SYSTEM_IS_DOCK_POSITION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER))
#define SHELF_SYSTEM_IS_DOCK_POSITION_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER))
#define SHELF_SYSTEM_DOCK_POSITION_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER, ShelfSystemDockPositionManagerClass))

typedef struct _ShelfSystemDockPositionManager ShelfSystemDockPositionManager;
typedef struct _ShelfSystemDockPositionManagerClass ShelfSystemDockPositionManagerClass;
typedef struct _ShelfSystemDockPositionManagerPrivate ShelfSystemDockPositionManagerPrivate;
typedef struct _ShelfDockControllerPrivate ShelfDockControllerPrivate;

#define SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW (shelf_widgets_composited_window_get_type ())
#define SHELF_WIDGETS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW, ShelfWidgetsCompositedWindow))
#define SHELF_WIDGETS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW, ShelfWidgetsCompositedWindowClass))
#define SHELF_WIDGETS_IS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW))
#define SHELF_WIDGETS_IS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW))
#define SHELF_WIDGETS_COMPOSITED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW, ShelfWidgetsCompositedWindowClass))

typedef struct _ShelfWidgetsCompositedWindow ShelfWidgetsCompositedWindow;
typedef struct _ShelfWidgetsCompositedWindowClass ShelfWidgetsCompositedWindowClass;

#define SHELF_WIDGETS_TYPE_DOCK_WINDOW (shelf_widgets_dock_window_get_type ())
#define SHELF_WIDGETS_DOCK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_WIDGETS_TYPE_DOCK_WINDOW, ShelfWidgetsDockWindow))
#define SHELF_WIDGETS_DOCK_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_WIDGETS_TYPE_DOCK_WINDOW, ShelfWidgetsDockWindowClass))
#define SHELF_WIDGETS_IS_DOCK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_WIDGETS_TYPE_DOCK_WINDOW))
#define SHELF_WIDGETS_IS_DOCK_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_WIDGETS_TYPE_DOCK_WINDOW))
#define SHELF_WIDGETS_DOCK_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_WIDGETS_TYPE_DOCK_WINDOW, ShelfWidgetsDockWindowClass))

typedef struct _ShelfWidgetsDockWindow ShelfWidgetsDockWindow;
typedef struct _ShelfWidgetsDockWindowClass ShelfWidgetsDockWindowClass;

#define SHELF_DRAWING_TYPE_DOCK_RENDERER (shelf_drawing_dock_renderer_get_type ())
#define SHELF_DRAWING_DOCK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_DRAWING_TYPE_DOCK_RENDERER, ShelfDrawingDockRenderer))
#define SHELF_DRAWING_DOCK_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_DRAWING_TYPE_DOCK_RENDERER, ShelfDrawingDockRendererClass))
#define SHELF_DRAWING_IS_DOCK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_DRAWING_TYPE_DOCK_RENDERER))
#define SHELF_DRAWING_IS_DOCK_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_DRAWING_TYPE_DOCK_RENDERER))
#define SHELF_DRAWING_DOCK_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_DRAWING_TYPE_DOCK_RENDERER, ShelfDrawingDockRendererClass))

typedef struct _ShelfDrawingDockRenderer ShelfDrawingDockRenderer;
typedef struct _ShelfDrawingDockRendererClass ShelfDrawingDockRendererClass;

#define SHELF_DRAWING_TYPE_COLOR (shelf_drawing_color_get_type ())
typedef struct _ShelfDrawingColor ShelfDrawingColor;
typedef struct _ShelfDrawingDockRendererPrivate ShelfDrawingDockRendererPrivate;
typedef struct _ShelfDrawingTabRendererPrivate ShelfDrawingTabRendererPrivate;

#define SHELF_DRAWING_TYPE_DRAWING_SERVICE (shelf_drawing_drawing_service_get_type ())
#define SHELF_DRAWING_DRAWING_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_DRAWING_TYPE_DRAWING_SERVICE, ShelfDrawingDrawingService))
#define SHELF_DRAWING_DRAWING_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_DRAWING_TYPE_DRAWING_SERVICE, ShelfDrawingDrawingServiceClass))
#define SHELF_DRAWING_IS_DRAWING_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_DRAWING_TYPE_DRAWING_SERVICE))
#define SHELF_DRAWING_IS_DRAWING_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_DRAWING_TYPE_DRAWING_SERVICE))
#define SHELF_DRAWING_DRAWING_SERVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_DRAWING_TYPE_DRAWING_SERVICE, ShelfDrawingDrawingServiceClass))

typedef struct _ShelfDrawingDrawingService ShelfDrawingDrawingService;
typedef struct _ShelfDrawingDrawingServiceClass ShelfDrawingDrawingServiceClass;
typedef struct _ShelfDrawingDrawingServicePrivate ShelfDrawingDrawingServicePrivate;
typedef struct _ShelfWidgetsCompositedWindowPrivate ShelfWidgetsCompositedWindowPrivate;
typedef struct _ShelfWidgetsDockWindowPrivate ShelfWidgetsDockWindowPrivate;

struct _ShelfFactoriesAbstractMain {
	GObject parent_instance;
	ShelfFactoriesAbstractMainPrivate * priv;
	GtkApplication* application;
	gchar* program_name;
	gchar* exec_name;
};

struct _ShelfFactoriesAbstractMainClass {
	GObjectClass parent_class;
	gint (*run) (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
	void (*initialize_program) (ShelfFactoriesAbstractMain* self);
	gboolean (*initialize_libraries) (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
	gboolean (*parse_commandline) (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
	void (*set_options) (ShelfFactoriesAbstractMain* self);
	void (*create_controller) (ShelfFactoriesAbstractMain* self);
};

struct _ShelfFactoriesFactory {
	GObject parent_instance;
	ShelfFactoriesFactoryPrivate * priv;
};

struct _ShelfFactoriesFactoryClass {
	GObjectClass parent_class;
};

struct _ShelfFactoriesItemFactory {
	GObject parent_instance;
	ShelfFactoriesItemFactoryPrivate * priv;
};

struct _ShelfFactoriesItemFactoryClass {
	GObjectClass parent_class;
};

struct _ShelfItemsTab {
	GObject parent_instance;
	ShelfItemsTabPrivate * priv;
	ShelfDrawingTabRenderer* tab_renderer;
	gboolean hovered;
};

struct _ShelfItemsTabClass {
	GObjectClass parent_class;
};

struct _ShelfItemsTabManager {
	GObject parent_instance;
	ShelfItemsTabManagerPrivate * priv;
	gint tab_icon_size;
	gint tab_margin;
};

struct _ShelfItemsTabManagerClass {
	GObjectClass parent_class;
};

typedef enum  {
	SHELF_SYSTEM_LOG_LEVEL_VERBOSE,
	SHELF_SYSTEM_LOG_LEVEL_DEBUG,
	SHELF_SYSTEM_LOG_LEVEL_INFO,
	SHELF_SYSTEM_LOG_LEVEL_NOTIFY,
	SHELF_SYSTEM_LOG_LEVEL_WARN,
	SHELF_SYSTEM_LOG_LEVEL_ERROR,
	SHELF_SYSTEM_LOG_LEVEL_FATAL
} ShelfSystemLogLevel;

struct _ShelfSystemLogger {
	GObject parent_instance;
	ShelfSystemLoggerPrivate * priv;
};

struct _ShelfSystemLoggerClass {
	GObjectClass parent_class;
};

struct _ShelfSystemDockPositionManager {
	GObject parent_instance;
	ShelfSystemDockPositionManagerPrivate * priv;
};

struct _ShelfSystemDockPositionManagerClass {
	GObjectClass parent_class;
};

struct _ShelfDockController {
	GObject parent_instance;
	ShelfDockControllerPrivate * priv;
	ShelfWidgetsDockWindow* window;
	ShelfDrawingDockRenderer* renderer;
	ShelfSystemDockPositionManager* position_manager;
	ShelfItemsTabManager* tab_manager;
};

struct _ShelfDockControllerClass {
	GObjectClass parent_class;
};

struct _ShelfDrawingColor {
	gdouble R;
	gdouble G;
	gdouble B;
	gdouble A;
};

struct _ShelfDrawingDockRenderer {
	GObject parent_instance;
	ShelfDrawingDockRendererPrivate * priv;
};

struct _ShelfDrawingDockRendererClass {
	GObjectClass parent_class;
};

struct _ShelfDrawingTabRenderer {
	GObject parent_instance;
	ShelfDrawingTabRendererPrivate * priv;
};

struct _ShelfDrawingTabRendererClass {
	GObjectClass parent_class;
};

struct _ShelfDrawingDrawingService {
	GObject parent_instance;
	ShelfDrawingDrawingServicePrivate * priv;
};

struct _ShelfDrawingDrawingServiceClass {
	GObjectClass parent_class;
};

struct _ShelfWidgetsCompositedWindow {
	GtkWindow parent_instance;
	ShelfWidgetsCompositedWindowPrivate * priv;
};

struct _ShelfWidgetsCompositedWindowClass {
	GtkWindowClass parent_class;
};

struct _ShelfWidgetsDockWindow {
	ShelfWidgetsCompositedWindow parent_instance;
	ShelfWidgetsDockWindowPrivate * priv;
};

struct _ShelfWidgetsDockWindowClass {
	ShelfWidgetsCompositedWindowClass parent_class;
};


GType shelf_factories_abstract_main_get_type (void) G_GNUC_CONST;
extern gboolean shelf_factories_abstract_main_DEBUG;
extern gboolean shelf_factories_abstract_main_VERBOSE;
gint shelf_factories_abstract_main_run (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
void shelf_factories_abstract_main_initialize_program (ShelfFactoriesAbstractMain* self);
gboolean shelf_factories_abstract_main_initialize_libraries (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
gboolean shelf_factories_abstract_main_parse_commandline (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
void shelf_factories_abstract_main_set_options (ShelfFactoriesAbstractMain* self);
void shelf_factories_abstract_main_create_controller (ShelfFactoriesAbstractMain* self);
ShelfFactoriesAbstractMain* shelf_factories_abstract_main_construct (GType object_type);
GType shelf_factories_factory_get_type (void) G_GNUC_CONST;
extern ShelfFactoriesAbstractMain* shelf_factories_factory_main;
GType shelf_factories_item_factory_get_type (void) G_GNUC_CONST;
extern ShelfFactoriesItemFactory* shelf_factories_factory_item_factory;
void shelf_factories_factory_init (ShelfFactoriesAbstractMain* main_class, ShelfFactoriesItemFactory* item);
ShelfFactoriesFactory* shelf_factories_factory_new (void);
ShelfFactoriesFactory* shelf_factories_factory_construct (GType object_type);
ShelfFactoriesItemFactory* shelf_factories_item_factory_new (void);
ShelfFactoriesItemFactory* shelf_factories_item_factory_construct (GType object_type);
GType shelf_items_tab_get_type (void) G_GNUC_CONST;
GType shelf_drawing_tab_renderer_get_type (void) G_GNUC_CONST;
GType shelf_items_tab_manager_get_type (void) G_GNUC_CONST;
ShelfItemsTab* shelf_items_tab_new (ShelfItemsTabManager* manager);
ShelfItemsTab* shelf_items_tab_construct (GType object_type, ShelfItemsTabManager* manager);
void shelf_items_tab_draw (ShelfItemsTab* self, cairo_t* cr, gint position);
gboolean shelf_items_tab_is_mouse_inside_tab (ShelfItemsTab* self, GdkEventMotion* event);
ShelfItemsTabManager* shelf_items_tab_get_tab_manager (ShelfItemsTab* self);
GType shelf_dock_controller_get_type (void) G_GNUC_CONST;
ShelfItemsTabManager* shelf_items_tab_manager_new (ShelfDockController* controller);
ShelfItemsTabManager* shelf_items_tab_manager_construct (GType object_type, ShelfDockController* controller);
void shelf_items_tab_manager_populate (ShelfItemsTabManager* self);
void shelf_items_tab_manager_add_tab (ShelfItemsTabManager* self, ShelfItemsTab* t);
void shelf_items_tab_manager_draw (ShelfItemsTabManager* self, cairo_t* cr);
gint shelf_items_tab_manager_get_tab_position (ShelfItemsTabManager* self, ShelfItemsTab* t);
void shelf_items_tab_manager_check_tab_mouse_collision (ShelfItemsTabManager* self, GdkEventMotion* event);
GType shelf_system_log_level_get_type (void) G_GNUC_CONST;
GType shelf_system_logger_get_type (void) G_GNUC_CONST;
void shelf_system_logger_initialize (const gchar* app_name);
void shelf_system_logger_notification (const gchar* msg, const gchar* icon);
void shelf_system_logger_verbose (const gchar* msg, ...);
ShelfSystemLogLevel shelf_system_logger_get_DisplayLevel (void);
void shelf_system_logger_set_DisplayLevel (ShelfSystemLogLevel value);
GType shelf_system_dock_position_manager_get_type (void) G_GNUC_CONST;
ShelfSystemDockPositionManager* shelf_system_dock_position_manager_new (ShelfDockController* controller);
ShelfSystemDockPositionManager* shelf_system_dock_position_manager_construct (GType object_type, ShelfDockController* controller);
void shelf_system_dock_position_manager_initialize (ShelfSystemDockPositionManager* self);
GType shelf_widgets_composited_window_get_type (void) G_GNUC_CONST;
GType shelf_widgets_dock_window_get_type (void) G_GNUC_CONST;
GType shelf_drawing_dock_renderer_get_type (void) G_GNUC_CONST;
ShelfDockController* shelf_dock_controller_new (void);
ShelfDockController* shelf_dock_controller_construct (GType object_type);
GType shelf_drawing_color_get_type (void) G_GNUC_CONST;
ShelfDrawingColor* shelf_drawing_color_dup (const ShelfDrawingColor* self);
void shelf_drawing_color_free (ShelfDrawingColor* self);
void shelf_drawing_color_from_gdk_color (GdkColor* color, ShelfDrawingColor* result);
void shelf_drawing_color_to_gdk_color (ShelfDrawingColor *self, GdkColor* result);
void shelf_drawing_color_from_gdk_rgba (GdkRGBA* color, ShelfDrawingColor* result);
void shelf_drawing_color_to_gdk_rgba (ShelfDrawingColor *self, GdkRGBA* result);
gboolean shelf_drawing_color_equal (ShelfDrawingColor *self, ShelfDrawingColor* color);
void shelf_drawing_color_set_hsv (ShelfDrawingColor *self, gdouble h, gdouble s, gdouble v);
void shelf_drawing_color_set_hue (ShelfDrawingColor *self, gdouble hue);
void shelf_drawing_color_set_sat (ShelfDrawingColor *self, gdouble sat);
void shelf_drawing_color_set_val (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_set_alpha (ShelfDrawingColor *self, gdouble alpha);
void shelf_drawing_color_get_hsv (ShelfDrawingColor *self, gdouble* h, gdouble* s, gdouble* v);
gdouble shelf_drawing_color_get_hue (ShelfDrawingColor *self);
gdouble shelf_drawing_color_get_sat (ShelfDrawingColor *self);
gdouble shelf_drawing_color_get_val (ShelfDrawingColor *self);
void shelf_drawing_color_add_hue (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_set_min_sat (ShelfDrawingColor *self, gdouble sat);
void shelf_drawing_color_set_min_value (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_set_max_sat (ShelfDrawingColor *self, gdouble sat);
void shelf_drawing_color_set_max_val (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_multiply_sat (ShelfDrawingColor *self, gdouble amount);
void shelf_drawing_color_brighten_val (ShelfDrawingColor *self, gdouble amount);
void shelf_drawing_color_darken_val (ShelfDrawingColor *self, gdouble amount);
void shelf_drawing_color_darken_by_sat (ShelfDrawingColor *self, gdouble amount);
gchar* shelf_drawing_color_to_string (ShelfDrawingColor *self);
void shelf_drawing_color_from_string (const gchar* s, ShelfDrawingColor* result);
ShelfDrawingDockRenderer* shelf_drawing_dock_renderer_new (ShelfDockController* controller);
ShelfDrawingDockRenderer* shelf_drawing_dock_renderer_construct (GType object_type, ShelfDockController* controller);
gboolean shelf_drawing_dock_renderer_draw (ShelfDrawingDockRenderer* self, cairo_t* cr);
ShelfDrawingTabRenderer* shelf_drawing_tab_renderer_new (ShelfItemsTab* the_tab);
ShelfDrawingTabRenderer* shelf_drawing_tab_renderer_construct (GType object_type, ShelfItemsTab* the_tab);
void shelf_drawing_tab_renderer_draw (ShelfDrawingTabRenderer* self, cairo_t* cr, gint position);
GType shelf_drawing_drawing_service_get_type (void) G_GNUC_CONST;
void shelf_drawing_drawing_service_average_color (GdkPixbuf* source, ShelfDrawingColor* result);
ShelfDrawingDrawingService* shelf_drawing_drawing_service_new (void);
ShelfDrawingDrawingService* shelf_drawing_drawing_service_construct (GType object_type);
ShelfWidgetsDockWindow* shelf_widgets_dock_window_new (ShelfDockController* controller);
ShelfWidgetsDockWindow* shelf_widgets_dock_window_construct (GType object_type, ShelfDockController* controller);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_new (void);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_construct (GType object_type);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_new_with_type (GtkWindowType window_type);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_construct_with_type (GType object_type, GtkWindowType window_type);

extern const GOptionEntry SHELF_FACTORIES_ABSTRACT_MAIN_options[3];

G_END_DECLS

#endif
