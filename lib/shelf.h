/* shelf.h generated by valac 0.20.1.4-f5a54, the Vala compiler, do not modify */


#ifndef __SHELF_H__
#define __SHELF_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <cairo.h>
#include <gdk/gdk.h>
#include <gee.h>
#include <libbamf/libbamf.h>
#include <gio/gio.h>
#include <float.h>
#include <math.h>
#include <gdk-pixbuf/gdk-pixbuf.h>

G_BEGIN_DECLS


#define SHELF_FACTORIES_TYPE_ABSTRACT_MAIN (shelf_factories_abstract_main_get_type ())
#define SHELF_FACTORIES_ABSTRACT_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN, ShelfFactoriesAbstractMain))
#define SHELF_FACTORIES_ABSTRACT_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN, ShelfFactoriesAbstractMainClass))
#define SHELF_FACTORIES_IS_ABSTRACT_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN))
#define SHELF_FACTORIES_IS_ABSTRACT_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN))
#define SHELF_FACTORIES_ABSTRACT_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_FACTORIES_TYPE_ABSTRACT_MAIN, ShelfFactoriesAbstractMainClass))

typedef struct _ShelfFactoriesAbstractMain ShelfFactoriesAbstractMain;
typedef struct _ShelfFactoriesAbstractMainClass ShelfFactoriesAbstractMainClass;
typedef struct _ShelfFactoriesAbstractMainPrivate ShelfFactoriesAbstractMainPrivate;

#define SHELF_FACTORIES_TYPE_FACTORY (shelf_factories_factory_get_type ())
#define SHELF_FACTORIES_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_FACTORIES_TYPE_FACTORY, ShelfFactoriesFactory))
#define SHELF_FACTORIES_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_FACTORIES_TYPE_FACTORY, ShelfFactoriesFactoryClass))
#define SHELF_FACTORIES_IS_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_FACTORIES_TYPE_FACTORY))
#define SHELF_FACTORIES_IS_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_FACTORIES_TYPE_FACTORY))
#define SHELF_FACTORIES_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_FACTORIES_TYPE_FACTORY, ShelfFactoriesFactoryClass))

typedef struct _ShelfFactoriesFactory ShelfFactoriesFactory;
typedef struct _ShelfFactoriesFactoryClass ShelfFactoriesFactoryClass;
typedef struct _ShelfFactoriesFactoryPrivate ShelfFactoriesFactoryPrivate;

#define SHELF_FACTORIES_TYPE_ITEM_FACTORY (shelf_factories_item_factory_get_type ())
#define SHELF_FACTORIES_ITEM_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_FACTORIES_TYPE_ITEM_FACTORY, ShelfFactoriesItemFactory))
#define SHELF_FACTORIES_ITEM_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_FACTORIES_TYPE_ITEM_FACTORY, ShelfFactoriesItemFactoryClass))
#define SHELF_FACTORIES_IS_ITEM_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_FACTORIES_TYPE_ITEM_FACTORY))
#define SHELF_FACTORIES_IS_ITEM_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_FACTORIES_TYPE_ITEM_FACTORY))
#define SHELF_FACTORIES_ITEM_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_FACTORIES_TYPE_ITEM_FACTORY, ShelfFactoriesItemFactoryClass))

typedef struct _ShelfFactoriesItemFactory ShelfFactoriesItemFactory;
typedef struct _ShelfFactoriesItemFactoryClass ShelfFactoriesItemFactoryClass;
typedef struct _ShelfFactoriesItemFactoryPrivate ShelfFactoriesItemFactoryPrivate;

#define SHELF_ITEMS_TYPE_TAB (shelf_items_tab_get_type ())
#define SHELF_ITEMS_TAB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_ITEMS_TYPE_TAB, ShelfItemsTab))
#define SHELF_ITEMS_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_ITEMS_TYPE_TAB, ShelfItemsTabClass))
#define SHELF_ITEMS_IS_TAB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_ITEMS_TYPE_TAB))
#define SHELF_ITEMS_IS_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_ITEMS_TYPE_TAB))
#define SHELF_ITEMS_TAB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_ITEMS_TYPE_TAB, ShelfItemsTabClass))

typedef struct _ShelfItemsTab ShelfItemsTab;
typedef struct _ShelfItemsTabClass ShelfItemsTabClass;
typedef struct _ShelfItemsTabPrivate ShelfItemsTabPrivate;

#define SHELF_DRAWING_TYPE_TAB_RENDERER (shelf_drawing_tab_renderer_get_type ())
#define SHELF_DRAWING_TAB_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_DRAWING_TYPE_TAB_RENDERER, ShelfDrawingTabRenderer))
#define SHELF_DRAWING_TAB_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_DRAWING_TYPE_TAB_RENDERER, ShelfDrawingTabRendererClass))
#define SHELF_DRAWING_IS_TAB_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_DRAWING_TYPE_TAB_RENDERER))
#define SHELF_DRAWING_IS_TAB_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_DRAWING_TYPE_TAB_RENDERER))
#define SHELF_DRAWING_TAB_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_DRAWING_TYPE_TAB_RENDERER, ShelfDrawingTabRendererClass))

typedef struct _ShelfDrawingTabRenderer ShelfDrawingTabRenderer;
typedef struct _ShelfDrawingTabRendererClass ShelfDrawingTabRendererClass;

#define SHELF_ITEMS_TYPE_TAB_MANAGER (shelf_items_tab_manager_get_type ())
#define SHELF_ITEMS_TAB_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_ITEMS_TYPE_TAB_MANAGER, ShelfItemsTabManager))
#define SHELF_ITEMS_TAB_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_ITEMS_TYPE_TAB_MANAGER, ShelfItemsTabManagerClass))
#define SHELF_ITEMS_IS_TAB_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_ITEMS_TYPE_TAB_MANAGER))
#define SHELF_ITEMS_IS_TAB_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_ITEMS_TYPE_TAB_MANAGER))
#define SHELF_ITEMS_TAB_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_ITEMS_TYPE_TAB_MANAGER, ShelfItemsTabManagerClass))

typedef struct _ShelfItemsTabManager ShelfItemsTabManager;
typedef struct _ShelfItemsTabManagerClass ShelfItemsTabManagerClass;
typedef struct _ShelfItemsTabManagerPrivate ShelfItemsTabManagerPrivate;

#define SHELF_TYPE_DOCK_CONTROLLER (shelf_dock_controller_get_type ())
#define SHELF_DOCK_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_TYPE_DOCK_CONTROLLER, ShelfDockController))
#define SHELF_DOCK_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_TYPE_DOCK_CONTROLLER, ShelfDockControllerClass))
#define SHELF_IS_DOCK_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_TYPE_DOCK_CONTROLLER))
#define SHELF_IS_DOCK_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_TYPE_DOCK_CONTROLLER))
#define SHELF_DOCK_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_TYPE_DOCK_CONTROLLER, ShelfDockControllerClass))

typedef struct _ShelfDockController ShelfDockController;
typedef struct _ShelfDockControllerClass ShelfDockControllerClass;

#define SHELF_SERVICES_WINDOWS_TYPE_MATCHER (shelf_services_windows_matcher_get_type ())
#define SHELF_SERVICES_WINDOWS_MATCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SERVICES_WINDOWS_TYPE_MATCHER, ShelfServicesWindowsMatcher))
#define SHELF_SERVICES_WINDOWS_MATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SERVICES_WINDOWS_TYPE_MATCHER, ShelfServicesWindowsMatcherClass))
#define SHELF_SERVICES_WINDOWS_IS_MATCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SERVICES_WINDOWS_TYPE_MATCHER))
#define SHELF_SERVICES_WINDOWS_IS_MATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SERVICES_WINDOWS_TYPE_MATCHER))
#define SHELF_SERVICES_WINDOWS_MATCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SERVICES_WINDOWS_TYPE_MATCHER, ShelfServicesWindowsMatcherClass))

typedef struct _ShelfServicesWindowsMatcher ShelfServicesWindowsMatcher;
typedef struct _ShelfServicesWindowsMatcherClass ShelfServicesWindowsMatcherClass;
typedef struct _ShelfServicesWindowsMatcherPrivate ShelfServicesWindowsMatcherPrivate;

#define SHELF_SYSTEM_TYPE_LOG_LEVEL (shelf_system_log_level_get_type ())

#define SHELF_SYSTEM_TYPE_LOGGER (shelf_system_logger_get_type ())
#define SHELF_SYSTEM_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_LOGGER, ShelfSystemLogger))
#define SHELF_SYSTEM_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_LOGGER, ShelfSystemLoggerClass))
#define SHELF_SYSTEM_IS_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_LOGGER))
#define SHELF_SYSTEM_IS_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_LOGGER))
#define SHELF_SYSTEM_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_LOGGER, ShelfSystemLoggerClass))

typedef struct _ShelfSystemLogger ShelfSystemLogger;
typedef struct _ShelfSystemLoggerClass ShelfSystemLoggerClass;
typedef struct _ShelfSystemLoggerPrivate ShelfSystemLoggerPrivate;

#define SHELF_SYSTEM_TYPE_PREFERENCES (shelf_system_preferences_get_type ())
#define SHELF_SYSTEM_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_PREFERENCES, ShelfSystemPreferences))
#define SHELF_SYSTEM_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_PREFERENCES, ShelfSystemPreferencesClass))
#define SHELF_SYSTEM_IS_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_PREFERENCES))
#define SHELF_SYSTEM_IS_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_PREFERENCES))
#define SHELF_SYSTEM_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_PREFERENCES, ShelfSystemPreferencesClass))

typedef struct _ShelfSystemPreferences ShelfSystemPreferences;
typedef struct _ShelfSystemPreferencesClass ShelfSystemPreferencesClass;
typedef struct _ShelfSystemPreferencesPrivate ShelfSystemPreferencesPrivate;

#define SHELF_SYSTEM_TYPE_DOCK_PREFERENCES (shelf_system_dock_preferences_get_type ())
#define SHELF_SYSTEM_DOCK_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_DOCK_PREFERENCES, ShelfSystemDockPreferences))
#define SHELF_SYSTEM_DOCK_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_DOCK_PREFERENCES, ShelfSystemDockPreferencesClass))
#define SHELF_SYSTEM_IS_DOCK_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_DOCK_PREFERENCES))
#define SHELF_SYSTEM_IS_DOCK_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_DOCK_PREFERENCES))
#define SHELF_SYSTEM_DOCK_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_DOCK_PREFERENCES, ShelfSystemDockPreferencesClass))

typedef struct _ShelfSystemDockPreferences ShelfSystemDockPreferences;
typedef struct _ShelfSystemDockPreferencesClass ShelfSystemDockPreferencesClass;
typedef struct _ShelfSystemDockPreferencesPrivate ShelfSystemDockPreferencesPrivate;

#define SHELF_SYSTEM_TYPE_HIDE_TYPE (shelf_system_hide_type_get_type ())

#define SHELF_SYSTEM_TYPE_PATHS (shelf_system_paths_get_type ())
#define SHELF_SYSTEM_PATHS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_PATHS, ShelfSystemPaths))
#define SHELF_SYSTEM_PATHS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_PATHS, ShelfSystemPathsClass))
#define SHELF_SYSTEM_IS_PATHS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_PATHS))
#define SHELF_SYSTEM_IS_PATHS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_PATHS))
#define SHELF_SYSTEM_PATHS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_PATHS, ShelfSystemPathsClass))

typedef struct _ShelfSystemPaths ShelfSystemPaths;
typedef struct _ShelfSystemPathsClass ShelfSystemPathsClass;
typedef struct _ShelfSystemPathsPrivate ShelfSystemPathsPrivate;

#define SHELF_SYSTEM_TYPE_PREFS_SERIALIZABLE (shelf_system_prefs_serializable_get_type ())
#define SHELF_SYSTEM_PREFS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_PREFS_SERIALIZABLE, ShelfSystemPrefsSerializable))
#define SHELF_SYSTEM_IS_PREFS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_PREFS_SERIALIZABLE))
#define SHELF_SYSTEM_PREFS_SERIALIZABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SHELF_SYSTEM_TYPE_PREFS_SERIALIZABLE, ShelfSystemPrefsSerializableIface))

typedef struct _ShelfSystemPrefsSerializable ShelfSystemPrefsSerializable;
typedef struct _ShelfSystemPrefsSerializableIface ShelfSystemPrefsSerializableIface;

#define SHELF_SYSTEM_TYPE_THEME (shelf_system_theme_get_type ())
#define SHELF_SYSTEM_THEME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_THEME, ShelfSystemTheme))
#define SHELF_SYSTEM_THEME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_THEME, ShelfSystemThemeClass))
#define SHELF_SYSTEM_IS_THEME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_THEME))
#define SHELF_SYSTEM_IS_THEME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_THEME))
#define SHELF_SYSTEM_THEME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_THEME, ShelfSystemThemeClass))

typedef struct _ShelfSystemTheme ShelfSystemTheme;
typedef struct _ShelfSystemThemeClass ShelfSystemThemeClass;
typedef struct _ShelfSystemThemePrivate ShelfSystemThemePrivate;

#define SHELF_SYSTEM_TYPE_HIDE_MANAGER (shelf_system_hide_manager_get_type ())
#define SHELF_SYSTEM_HIDE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_HIDE_MANAGER, ShelfSystemHideManager))
#define SHELF_SYSTEM_HIDE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_HIDE_MANAGER, ShelfSystemHideManagerClass))
#define SHELF_SYSTEM_IS_HIDE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_HIDE_MANAGER))
#define SHELF_SYSTEM_IS_HIDE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_HIDE_MANAGER))
#define SHELF_SYSTEM_HIDE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_HIDE_MANAGER, ShelfSystemHideManagerClass))

typedef struct _ShelfSystemHideManager ShelfSystemHideManager;
typedef struct _ShelfSystemHideManagerClass ShelfSystemHideManagerClass;
typedef struct _ShelfSystemHideManagerPrivate ShelfSystemHideManagerPrivate;

#define SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER (shelf_system_dock_position_manager_get_type ())
#define SHELF_SYSTEM_DOCK_POSITION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER, ShelfSystemDockPositionManager))
#define SHELF_SYSTEM_DOCK_POSITION_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER, ShelfSystemDockPositionManagerClass))
#define SHELF_SYSTEM_IS_DOCK_POSITION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER))
#define SHELF_SYSTEM_IS_DOCK_POSITION_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER))
#define SHELF_SYSTEM_DOCK_POSITION_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SYSTEM_TYPE_DOCK_POSITION_MANAGER, ShelfSystemDockPositionManagerClass))

typedef struct _ShelfSystemDockPositionManager ShelfSystemDockPositionManager;
typedef struct _ShelfSystemDockPositionManagerClass ShelfSystemDockPositionManagerClass;
typedef struct _ShelfSystemDockPositionManagerPrivate ShelfSystemDockPositionManagerPrivate;
typedef struct _ShelfDockControllerPrivate ShelfDockControllerPrivate;

#define SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW (shelf_widgets_composited_window_get_type ())
#define SHELF_WIDGETS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW, ShelfWidgetsCompositedWindow))
#define SHELF_WIDGETS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW, ShelfWidgetsCompositedWindowClass))
#define SHELF_WIDGETS_IS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW))
#define SHELF_WIDGETS_IS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW))
#define SHELF_WIDGETS_COMPOSITED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_WIDGETS_TYPE_COMPOSITED_WINDOW, ShelfWidgetsCompositedWindowClass))

typedef struct _ShelfWidgetsCompositedWindow ShelfWidgetsCompositedWindow;
typedef struct _ShelfWidgetsCompositedWindowClass ShelfWidgetsCompositedWindowClass;

#define SHELF_WIDGETS_TYPE_DOCK_WINDOW (shelf_widgets_dock_window_get_type ())
#define SHELF_WIDGETS_DOCK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_WIDGETS_TYPE_DOCK_WINDOW, ShelfWidgetsDockWindow))
#define SHELF_WIDGETS_DOCK_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_WIDGETS_TYPE_DOCK_WINDOW, ShelfWidgetsDockWindowClass))
#define SHELF_WIDGETS_IS_DOCK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_WIDGETS_TYPE_DOCK_WINDOW))
#define SHELF_WIDGETS_IS_DOCK_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_WIDGETS_TYPE_DOCK_WINDOW))
#define SHELF_WIDGETS_DOCK_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_WIDGETS_TYPE_DOCK_WINDOW, ShelfWidgetsDockWindowClass))

typedef struct _ShelfWidgetsDockWindow ShelfWidgetsDockWindow;
typedef struct _ShelfWidgetsDockWindowClass ShelfWidgetsDockWindowClass;

#define SHELF_DRAWING_TYPE_DOCK_RENDERER (shelf_drawing_dock_renderer_get_type ())
#define SHELF_DRAWING_DOCK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_DRAWING_TYPE_DOCK_RENDERER, ShelfDrawingDockRenderer))
#define SHELF_DRAWING_DOCK_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_DRAWING_TYPE_DOCK_RENDERER, ShelfDrawingDockRendererClass))
#define SHELF_DRAWING_IS_DOCK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_DRAWING_TYPE_DOCK_RENDERER))
#define SHELF_DRAWING_IS_DOCK_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_DRAWING_TYPE_DOCK_RENDERER))
#define SHELF_DRAWING_DOCK_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_DRAWING_TYPE_DOCK_RENDERER, ShelfDrawingDockRendererClass))

typedef struct _ShelfDrawingDockRenderer ShelfDrawingDockRenderer;
typedef struct _ShelfDrawingDockRendererClass ShelfDrawingDockRendererClass;

#define SHELF_DRAWING_TYPE_COLOR (shelf_drawing_color_get_type ())
typedef struct _ShelfDrawingColor ShelfDrawingColor;
typedef struct _ShelfDrawingDockRendererPrivate ShelfDrawingDockRendererPrivate;

#define SHELF_DRAWING_TYPE_DOCK_SURFACE (shelf_drawing_dock_surface_get_type ())
#define SHELF_DRAWING_DOCK_SURFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_DRAWING_TYPE_DOCK_SURFACE, ShelfDrawingDockSurface))
#define SHELF_DRAWING_DOCK_SURFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_DRAWING_TYPE_DOCK_SURFACE, ShelfDrawingDockSurfaceClass))
#define SHELF_DRAWING_IS_DOCK_SURFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_DRAWING_TYPE_DOCK_SURFACE))
#define SHELF_DRAWING_IS_DOCK_SURFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_DRAWING_TYPE_DOCK_SURFACE))
#define SHELF_DRAWING_DOCK_SURFACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_DRAWING_TYPE_DOCK_SURFACE, ShelfDrawingDockSurfaceClass))

typedef struct _ShelfDrawingDockSurface ShelfDrawingDockSurface;
typedef struct _ShelfDrawingDockSurfaceClass ShelfDrawingDockSurfaceClass;
typedef struct _ShelfDrawingDockSurfacePrivate ShelfDrawingDockSurfacePrivate;
typedef struct _ShelfDrawingTabRendererPrivate ShelfDrawingTabRendererPrivate;

#define SHELF_DRAWING_TYPE_DRAWING_SERVICE (shelf_drawing_drawing_service_get_type ())
#define SHELF_DRAWING_DRAWING_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_DRAWING_TYPE_DRAWING_SERVICE, ShelfDrawingDrawingService))
#define SHELF_DRAWING_DRAWING_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_DRAWING_TYPE_DRAWING_SERVICE, ShelfDrawingDrawingServiceClass))
#define SHELF_DRAWING_IS_DRAWING_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_DRAWING_TYPE_DRAWING_SERVICE))
#define SHELF_DRAWING_IS_DRAWING_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_DRAWING_TYPE_DRAWING_SERVICE))
#define SHELF_DRAWING_DRAWING_SERVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_DRAWING_TYPE_DRAWING_SERVICE, ShelfDrawingDrawingServiceClass))

typedef struct _ShelfDrawingDrawingService ShelfDrawingDrawingService;
typedef struct _ShelfDrawingDrawingServiceClass ShelfDrawingDrawingServiceClass;
typedef struct _ShelfDrawingDrawingServicePrivate ShelfDrawingDrawingServicePrivate;

#define SHELF_WIDGETS_TYPE_STRUTS (shelf_widgets_struts_get_type ())
typedef struct _ShelfWidgetsCompositedWindowPrivate ShelfWidgetsCompositedWindowPrivate;
typedef struct _ShelfWidgetsDockWindowPrivate ShelfWidgetsDockWindowPrivate;

struct _ShelfFactoriesAbstractMain {
	GObject parent_instance;
	ShelfFactoriesAbstractMainPrivate * priv;
	GtkApplication* application;
	gchar* build_pkg_data_dir;
	gchar* program_name;
	gchar* exec_name;
};

struct _ShelfFactoriesAbstractMainClass {
	GObjectClass parent_class;
	gint (*run) (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
	void (*initialize_program) (ShelfFactoriesAbstractMain* self);
	gboolean (*initialize_libraries) (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
	void (*initialize_services) (ShelfFactoriesAbstractMain* self);
	gboolean (*parse_commandline) (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
	void (*set_options) (ShelfFactoriesAbstractMain* self);
	void (*create_controller) (ShelfFactoriesAbstractMain* self);
};

struct _ShelfFactoriesFactory {
	GObject parent_instance;
	ShelfFactoriesFactoryPrivate * priv;
};

struct _ShelfFactoriesFactoryClass {
	GObjectClass parent_class;
};

struct _ShelfFactoriesItemFactory {
	GObject parent_instance;
	ShelfFactoriesItemFactoryPrivate * priv;
};

struct _ShelfFactoriesItemFactoryClass {
	GObjectClass parent_class;
};

struct _ShelfItemsTab {
	GObject parent_instance;
	ShelfItemsTabPrivate * priv;
	ShelfDrawingTabRenderer* tab_renderer;
	gboolean hovered;
};

struct _ShelfItemsTabClass {
	GObjectClass parent_class;
};

struct _ShelfItemsTabManager {
	GObject parent_instance;
	ShelfItemsTabManagerPrivate * priv;
};

struct _ShelfItemsTabManagerClass {
	GObjectClass parent_class;
};

struct _ShelfServicesWindowsMatcher {
	GObject parent_instance;
	ShelfServicesWindowsMatcherPrivate * priv;
};

struct _ShelfServicesWindowsMatcherClass {
	GObjectClass parent_class;
};

typedef enum  {
	SHELF_SYSTEM_LOG_LEVEL_VERBOSE,
	SHELF_SYSTEM_LOG_LEVEL_DEBUG,
	SHELF_SYSTEM_LOG_LEVEL_INFO,
	SHELF_SYSTEM_LOG_LEVEL_NOTIFY,
	SHELF_SYSTEM_LOG_LEVEL_WARN,
	SHELF_SYSTEM_LOG_LEVEL_ERROR,
	SHELF_SYSTEM_LOG_LEVEL_FATAL
} ShelfSystemLogLevel;

struct _ShelfSystemLogger {
	GObject parent_instance;
	ShelfSystemLoggerPrivate * priv;
};

struct _ShelfSystemLoggerClass {
	GObjectClass parent_class;
};

struct _ShelfSystemPreferences {
	GObject parent_instance;
	ShelfSystemPreferencesPrivate * priv;
};

struct _ShelfSystemPreferencesClass {
	GObjectClass parent_class;
	void (*verify) (ShelfSystemPreferences* self, const gchar* prop);
	void (*reset_properties) (ShelfSystemPreferences* self);
};

struct _ShelfSystemDockPreferences {
	ShelfSystemPreferences parent_instance;
	ShelfSystemDockPreferencesPrivate * priv;
};

struct _ShelfSystemDockPreferencesClass {
	ShelfSystemPreferencesClass parent_class;
};

typedef enum  {
	SHELF_SYSTEM_HIDE_TYPE_NONE,
	SHELF_SYSTEM_HIDE_TYPE_INTELLIGENT,
	SHELF_SYSTEM_HIDE_TYPE_AUTO
} ShelfSystemHideType;

struct _ShelfSystemPaths {
	GObject parent_instance;
	ShelfSystemPathsPrivate * priv;
};

struct _ShelfSystemPathsClass {
	GObjectClass parent_class;
};

struct _ShelfSystemPrefsSerializableIface {
	GTypeInterface parent_iface;
	gchar* (*prefs_serialize) (ShelfSystemPrefsSerializable* self);
	void (*prefs_deserialize) (ShelfSystemPrefsSerializable* self, const gchar* s);
};

struct _ShelfSystemTheme {
	GObject parent_instance;
	ShelfSystemThemePrivate * priv;
};

struct _ShelfSystemThemeClass {
	GObjectClass parent_class;
};

struct _ShelfSystemHideManager {
	GObject parent_instance;
	ShelfSystemHideManagerPrivate * priv;
};

struct _ShelfSystemHideManagerClass {
	GObjectClass parent_class;
};

struct _ShelfSystemDockPositionManager {
	GObject parent_instance;
	ShelfSystemDockPositionManagerPrivate * priv;
};

struct _ShelfSystemDockPositionManagerClass {
	GObjectClass parent_class;
};

struct _ShelfDockController {
	GObject parent_instance;
	ShelfDockControllerPrivate * priv;
	ShelfWidgetsDockWindow* window;
	ShelfDrawingDockRenderer* renderer;
	ShelfSystemDockPositionManager* position_manager;
	ShelfSystemDockPreferences* prefs;
	ShelfItemsTabManager* tab_manager;
	ShelfSystemHideManager* hide_manager;
	ShelfSystemTheme* theme_manager;
};

struct _ShelfDockControllerClass {
	GObjectClass parent_class;
};

struct _ShelfDrawingColor {
	gdouble R;
	gdouble G;
	gdouble B;
	gdouble A;
};

struct _ShelfDrawingDockRenderer {
	GObject parent_instance;
	ShelfDrawingDockRendererPrivate * priv;
};

struct _ShelfDrawingDockRendererClass {
	GObjectClass parent_class;
};

struct _ShelfDrawingDockSurface {
	GObject parent_instance;
	ShelfDrawingDockSurfacePrivate * priv;
};

struct _ShelfDrawingDockSurfaceClass {
	GObjectClass parent_class;
};

struct _ShelfDrawingTabRenderer {
	GObject parent_instance;
	ShelfDrawingTabRendererPrivate * priv;
};

struct _ShelfDrawingTabRendererClass {
	GObjectClass parent_class;
};

struct _ShelfDrawingDrawingService {
	GObject parent_instance;
	ShelfDrawingDrawingServicePrivate * priv;
};

struct _ShelfDrawingDrawingServiceClass {
	GObjectClass parent_class;
};

typedef enum  {
	SHELF_WIDGETS_STRUTS_LEFT,
	SHELF_WIDGETS_STRUTS_RIGHT,
	SHELF_WIDGETS_STRUTS_TOP,
	SHELF_WIDGETS_STRUTS_BOTTOM,
	SHELF_WIDGETS_STRUTS_LEFT_START,
	SHELF_WIDGETS_STRUTS_LEFT_END,
	SHELF_WIDGETS_STRUTS_RIGHT_START,
	SHELF_WIDGETS_STRUTS_RIGHT_END,
	SHELF_WIDGETS_STRUTS_TOP_START,
	SHELF_WIDGETS_STRUTS_TOP_END,
	SHELF_WIDGETS_STRUTS_BOTTOM_START,
	SHELF_WIDGETS_STRUTS_BOTTOM_END,
	SHELF_WIDGETS_STRUTS_N_VALUES
} ShelfWidgetsStruts;

struct _ShelfWidgetsCompositedWindow {
	GtkWindow parent_instance;
	ShelfWidgetsCompositedWindowPrivate * priv;
};

struct _ShelfWidgetsCompositedWindowClass {
	GtkWindowClass parent_class;
};

struct _ShelfWidgetsDockWindow {
	ShelfWidgetsCompositedWindow parent_instance;
	ShelfWidgetsDockWindowPrivate * priv;
};

struct _ShelfWidgetsDockWindowClass {
	ShelfWidgetsCompositedWindowClass parent_class;
};


GType shelf_factories_abstract_main_get_type (void) G_GNUC_CONST;
extern gchar* shelf_factories_abstract_main_dock_path;
extern gboolean shelf_factories_abstract_main_DEBUG;
extern gboolean shelf_factories_abstract_main_VERBOSE;
gint shelf_factories_abstract_main_run (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
void shelf_factories_abstract_main_initialize_program (ShelfFactoriesAbstractMain* self);
gboolean shelf_factories_abstract_main_initialize_libraries (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
void shelf_factories_abstract_main_initialize_services (ShelfFactoriesAbstractMain* self);
gboolean shelf_factories_abstract_main_parse_commandline (ShelfFactoriesAbstractMain* self, gchar*** args, int* args_length1);
void shelf_factories_abstract_main_set_options (ShelfFactoriesAbstractMain* self);
void shelf_factories_abstract_main_create_controller (ShelfFactoriesAbstractMain* self);
ShelfFactoriesAbstractMain* shelf_factories_abstract_main_construct (GType object_type);
GType shelf_factories_factory_get_type (void) G_GNUC_CONST;
extern ShelfFactoriesAbstractMain* shelf_factories_factory_main;
GType shelf_factories_item_factory_get_type (void) G_GNUC_CONST;
extern ShelfFactoriesItemFactory* shelf_factories_factory_item_factory;
void shelf_factories_factory_init (ShelfFactoriesAbstractMain* main_class, ShelfFactoriesItemFactory* item);
ShelfFactoriesFactory* shelf_factories_factory_new (void);
ShelfFactoriesFactory* shelf_factories_factory_construct (GType object_type);
ShelfFactoriesItemFactory* shelf_factories_item_factory_new (void);
ShelfFactoriesItemFactory* shelf_factories_item_factory_construct (GType object_type);
GType shelf_items_tab_get_type (void) G_GNUC_CONST;
GType shelf_drawing_tab_renderer_get_type (void) G_GNUC_CONST;
GType shelf_items_tab_manager_get_type (void) G_GNUC_CONST;
ShelfItemsTab* shelf_items_tab_new (ShelfItemsTabManager* manager, const gchar* tab_icon_path);
ShelfItemsTab* shelf_items_tab_construct (GType object_type, ShelfItemsTabManager* manager, const gchar* tab_icon_path);
void shelf_items_tab_draw (ShelfItemsTab* self, cairo_t* cr, gint position);
gboolean shelf_items_tab_is_mouse_inside_tab (ShelfItemsTab* self, GdkEventMotion* event);
ShelfItemsTabManager* shelf_items_tab_get_tab_manager (ShelfItemsTab* self);
const gchar* shelf_items_tab_get_icon_path (ShelfItemsTab* self);
GType shelf_dock_controller_get_type (void) G_GNUC_CONST;
ShelfItemsTabManager* shelf_items_tab_manager_new (ShelfDockController* controller);
ShelfItemsTabManager* shelf_items_tab_manager_construct (GType object_type, ShelfDockController* controller);
void shelf_items_tab_manager_populate (ShelfItemsTabManager* self);
void shelf_items_tab_manager_add_tab (ShelfItemsTabManager* self, ShelfItemsTab* t);
void shelf_items_tab_manager_draw (ShelfItemsTabManager* self, cairo_t* cr);
gint shelf_items_tab_manager_get_tab_position (ShelfItemsTabManager* self, ShelfItemsTab* t);
void shelf_items_tab_manager_check_tab_mouse_collision (ShelfItemsTabManager* self, GdkEventMotion* event);
ShelfDockController* shelf_items_tab_manager_get_controller (ShelfItemsTabManager* self);
GType shelf_services_windows_matcher_get_type (void) G_GNUC_CONST;
ShelfServicesWindowsMatcher* shelf_services_windows_matcher_get_default (void);
GeeArrayList* shelf_services_windows_matcher_active_launchers (ShelfServicesWindowsMatcher* self);
BamfApplication* shelf_services_windows_matcher_app_for_uri (ShelfServicesWindowsMatcher* self, const gchar* uri);
void shelf_services_windows_matcher_set_favorites (ShelfServicesWindowsMatcher* self, GeeArrayList* favs);
GType shelf_system_log_level_get_type (void) G_GNUC_CONST;
GType shelf_system_logger_get_type (void) G_GNUC_CONST;
void shelf_system_logger_initialize (const gchar* app_name);
void shelf_system_logger_notification (const gchar* msg, const gchar* icon);
void shelf_system_logger_verbose (const gchar* msg, ...);
ShelfSystemLogLevel shelf_system_logger_get_DisplayLevel (void);
void shelf_system_logger_set_DisplayLevel (ShelfSystemLogLevel value);
GType shelf_system_preferences_get_type (void) G_GNUC_CONST;
GType shelf_system_dock_preferences_get_type (void) G_GNUC_CONST;
ShelfSystemDockPreferences* shelf_system_dock_preferences_new (void);
ShelfSystemDockPreferences* shelf_system_dock_preferences_construct (GType object_type);
ShelfSystemDockPreferences* shelf_system_dock_preferences_new_with_filename (const gchar* filename);
ShelfSystemDockPreferences* shelf_system_dock_preferences_construct_with_filename (GType object_type, const gchar* filename);
void shelf_system_dock_preferences_increase_icon_size (ShelfSystemDockPreferences* self);
void shelf_system_dock_preferences_decrease_icon_size (ShelfSystemDockPreferences* self);
gint shelf_system_dock_preferences_get_IconSize (ShelfSystemDockPreferences* self);
void shelf_system_dock_preferences_set_IconSize (ShelfSystemDockPreferences* self, gint value);
GType shelf_system_hide_type_get_type (void) G_GNUC_CONST;
ShelfSystemHideType shelf_system_dock_preferences_get_HideMode (ShelfSystemDockPreferences* self);
void shelf_system_dock_preferences_set_HideMode (ShelfSystemDockPreferences* self, ShelfSystemHideType value);
guint shelf_system_dock_preferences_get_UnhideDelay (ShelfSystemDockPreferences* self);
void shelf_system_dock_preferences_set_UnhideDelay (ShelfSystemDockPreferences* self, guint value);
GType shelf_system_paths_get_type (void) G_GNUC_CONST;
void shelf_system_paths_initialize (const gchar* app_name, const gchar* data_folder);
gboolean shelf_system_paths_ensure_directory_exists (GFile* dir);
GFile* shelf_system_paths_get_HomeFolder (void);
void shelf_system_paths_set_HomeFolder (GFile* value);
GFile* shelf_system_paths_get_DataFolder (void);
void shelf_system_paths_set_DataFolder (GFile* value);
GFile* shelf_system_paths_get_ThemeFolder (void);
void shelf_system_paths_set_ThemeFolder (GFile* value);
GFile* shelf_system_paths_get_ConfigHomeFolder (void);
void shelf_system_paths_set_ConfigHomeFolder (GFile* value);
GFile* shelf_system_paths_get_DataHomeFolder (void);
void shelf_system_paths_set_DataHomeFolder (GFile* value);
GFile* shelf_system_paths_get_CacheHomeFolder (void);
void shelf_system_paths_set_CacheHomeFolder (GFile* value);
GeeArrayList* shelf_system_paths_get_DataDirFolders (void);
void shelf_system_paths_set_DataDirFolders (GeeArrayList* value);
GFile* shelf_system_paths_get_AppConfigFolder (void);
void shelf_system_paths_set_AppConfigFolder (GFile* value);
GFile* shelf_system_paths_get_AppDataFolder (void);
void shelf_system_paths_set_AppDataFolder (GFile* value);
GFile* shelf_system_paths_get_AppThemeFolder (void);
void shelf_system_paths_set_AppThemeFolder (GFile* value);
GFile* shelf_system_paths_get_AppCacheFolder (void);
void shelf_system_paths_set_AppCacheFolder (GFile* value);
GType shelf_system_prefs_serializable_get_type (void) G_GNUC_CONST;
gchar* shelf_system_prefs_serializable_prefs_serialize (ShelfSystemPrefsSerializable* self);
void shelf_system_prefs_serializable_prefs_deserialize (ShelfSystemPrefsSerializable* self, const gchar* s);
ShelfSystemPreferences* shelf_system_preferences_construct (GType object_type);
void shelf_system_preferences_verify (ShelfSystemPreferences* self, const gchar* prop);
void shelf_system_preferences_reset_properties (ShelfSystemPreferences* self);
ShelfSystemPreferences* shelf_system_preferences_construct_with_file (GType object_type, GFile* file);
ShelfSystemPreferences* shelf_system_preferences_construct_with_filename (GType object_type, const gchar* filename);
void shelf_system_preferences_init_from_file (ShelfSystemPreferences* self, GFile* file);
void shelf_system_preferences_init_from_filename (ShelfSystemPreferences* self, const gchar* filename);
void shelf_system_preferences_delay (ShelfSystemPreferences* self);
void shelf_system_preferences_apply (ShelfSystemPreferences* self);
gchar* shelf_system_preferences_get_filename (ShelfSystemPreferences* self);
void shelf_system_preferences_delete (ShelfSystemPreferences* self);
GType shelf_system_theme_get_type (void) G_GNUC_CONST;
ShelfSystemTheme* shelf_system_theme_new (ShelfDockController* controller);
ShelfSystemTheme* shelf_system_theme_construct (GType object_type, ShelfDockController* controller);
gint shelf_system_theme_get_tab_padding (ShelfSystemTheme* self);
void shelf_system_theme_set_tab_padding (ShelfSystemTheme* self, gint value);
GType shelf_system_hide_manager_get_type (void) G_GNUC_CONST;
ShelfSystemHideManager* shelf_system_hide_manager_new (ShelfDockController* controller);
ShelfSystemHideManager* shelf_system_hide_manager_construct (GType object_type, ShelfDockController* controller);
void shelf_system_hide_manager_initialize (ShelfSystemHideManager* self);
void shelf_system_hide_manager_update_dock_hovered (ShelfSystemHideManager* self);
gboolean shelf_system_hide_manager_get_Disabled (ShelfSystemHideManager* self);
void shelf_system_hide_manager_set_Disabled (ShelfSystemHideManager* self, gboolean value);
gboolean shelf_system_hide_manager_get_DockHovered (ShelfSystemHideManager* self);
void shelf_system_hide_manager_set_DockHovered (ShelfSystemHideManager* self, gboolean value);
GType shelf_system_dock_position_manager_get_type (void) G_GNUC_CONST;
ShelfSystemDockPositionManager* shelf_system_dock_position_manager_new (ShelfDockController* controller);
ShelfSystemDockPositionManager* shelf_system_dock_position_manager_construct (GType object_type, ShelfDockController* controller);
void shelf_system_dock_position_manager_initialize (ShelfSystemDockPositionManager* self);
void shelf_system_dock_position_manager_get_cursor_region (ShelfSystemDockPositionManager* self, GdkRectangle* result);
void shelf_system_dock_position_manager_get_static_dock_region (ShelfSystemDockPositionManager* self, GdkRectangle* result);
gint shelf_system_dock_position_manager_get_win_x (ShelfSystemDockPositionManager* self);
void shelf_system_dock_position_manager_set_win_x (ShelfSystemDockPositionManager* self, gint value);
gint shelf_system_dock_position_manager_get_win_y (ShelfSystemDockPositionManager* self);
void shelf_system_dock_position_manager_set_win_y (ShelfSystemDockPositionManager* self, gint value);
gint shelf_system_dock_position_manager_get_win_width (ShelfSystemDockPositionManager* self);
void shelf_system_dock_position_manager_set_win_width (ShelfSystemDockPositionManager* self, gint value);
gint shelf_system_dock_position_manager_get_win_height (ShelfSystemDockPositionManager* self);
void shelf_system_dock_position_manager_set_win_height (ShelfSystemDockPositionManager* self, gint value);
gint shelf_system_dock_position_manager_get_VisibleDockHeight (ShelfSystemDockPositionManager* self);
GType shelf_widgets_composited_window_get_type (void) G_GNUC_CONST;
GType shelf_widgets_dock_window_get_type (void) G_GNUC_CONST;
GType shelf_drawing_dock_renderer_get_type (void) G_GNUC_CONST;
ShelfDockController* shelf_dock_controller_new (void);
ShelfDockController* shelf_dock_controller_construct (GType object_type);
GType shelf_drawing_color_get_type (void) G_GNUC_CONST;
ShelfDrawingColor* shelf_drawing_color_dup (const ShelfDrawingColor* self);
void shelf_drawing_color_free (ShelfDrawingColor* self);
void shelf_drawing_color_from_gdk_color (GdkColor* color, ShelfDrawingColor* result);
void shelf_drawing_color_to_gdk_color (ShelfDrawingColor *self, GdkColor* result);
void shelf_drawing_color_from_gdk_rgba (GdkRGBA* color, ShelfDrawingColor* result);
void shelf_drawing_color_to_gdk_rgba (ShelfDrawingColor *self, GdkRGBA* result);
gboolean shelf_drawing_color_equal (ShelfDrawingColor *self, ShelfDrawingColor* color);
void shelf_drawing_color_set_hsv (ShelfDrawingColor *self, gdouble h, gdouble s, gdouble v);
void shelf_drawing_color_set_hue (ShelfDrawingColor *self, gdouble hue);
void shelf_drawing_color_set_sat (ShelfDrawingColor *self, gdouble sat);
void shelf_drawing_color_set_val (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_set_alpha (ShelfDrawingColor *self, gdouble alpha);
void shelf_drawing_color_get_hsv (ShelfDrawingColor *self, gdouble* h, gdouble* s, gdouble* v);
gdouble shelf_drawing_color_get_hue (ShelfDrawingColor *self);
gdouble shelf_drawing_color_get_sat (ShelfDrawingColor *self);
gdouble shelf_drawing_color_get_val (ShelfDrawingColor *self);
void shelf_drawing_color_add_hue (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_set_min_sat (ShelfDrawingColor *self, gdouble sat);
void shelf_drawing_color_set_min_value (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_set_max_sat (ShelfDrawingColor *self, gdouble sat);
void shelf_drawing_color_set_max_val (ShelfDrawingColor *self, gdouble val);
void shelf_drawing_color_multiply_sat (ShelfDrawingColor *self, gdouble amount);
void shelf_drawing_color_brighten_val (ShelfDrawingColor *self, gdouble amount);
void shelf_drawing_color_darken_val (ShelfDrawingColor *self, gdouble amount);
void shelf_drawing_color_darken_by_sat (ShelfDrawingColor *self, gdouble amount);
gchar* shelf_drawing_color_to_string (ShelfDrawingColor *self);
void shelf_drawing_color_from_string (const gchar* s, ShelfDrawingColor* result);
ShelfDrawingDockRenderer* shelf_drawing_dock_renderer_new (ShelfDockController* controller);
ShelfDrawingDockRenderer* shelf_drawing_dock_renderer_construct (GType object_type, ShelfDockController* controller);
void shelf_drawing_dock_renderer_initialize (ShelfDrawingDockRenderer* self);
void shelf_drawing_dock_renderer_show (ShelfDrawingDockRenderer* self);
void shelf_drawing_dock_renderer_hide (ShelfDrawingDockRenderer* self);
gboolean shelf_drawing_dock_renderer_draw (ShelfDrawingDockRenderer* self, cairo_t* cr);
gdouble shelf_drawing_dock_renderer_get_hide_offset (ShelfDrawingDockRenderer* self);
gboolean shelf_drawing_dock_renderer_get_Hidden (ShelfDrawingDockRenderer* self);
GType shelf_drawing_dock_surface_get_type (void) G_GNUC_CONST;
ShelfDrawingDockSurface* shelf_drawing_dock_surface_new (gint width, gint height);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_construct (GType object_type, gint width, gint height);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_new_with_surface (gint width, gint height, cairo_surface_t* model);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_construct_with_surface (GType object_type, gint width, gint height, cairo_surface_t* model);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_new_with_dock_surface (gint width, gint height, ShelfDrawingDockSurface* model);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_construct_with_dock_surface (GType object_type, gint width, gint height, ShelfDrawingDockSurface* model);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_new_with_internal (cairo_surface_t* image);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_construct_with_internal (GType object_type, cairo_surface_t* image);
void shelf_drawing_dock_surface_clear (ShelfDrawingDockSurface* self);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_copy (ShelfDrawingDockSurface* self);
GdkPixbuf* shelf_drawing_dock_surface_to_pixbuf (ShelfDrawingDockSurface* self);
ShelfDrawingDockSurface* shelf_drawing_dock_surface_create_mask (ShelfDrawingDockSurface* self, gdouble threshold, GdkRectangle* extent);
void shelf_drawing_dock_surface_average_color (ShelfDrawingDockSurface* self, ShelfDrawingColor* result);
void shelf_drawing_dock_surface_fast_blur (ShelfDrawingDockSurface* self, gint radius, gint process_count);
void shelf_drawing_dock_surface_exponential_blur (ShelfDrawingDockSurface* self, gint radius);
void shelf_drawing_dock_surface_gaussian_blur (ShelfDrawingDockSurface* self, gint radius);
cairo_surface_t* shelf_drawing_dock_surface_get_Internal (ShelfDrawingDockSurface* self);
gint shelf_drawing_dock_surface_get_Width (ShelfDrawingDockSurface* self);
gint shelf_drawing_dock_surface_get_Height (ShelfDrawingDockSurface* self);
cairo_t* shelf_drawing_dock_surface_get_Context (ShelfDrawingDockSurface* self);
ShelfDrawingTabRenderer* shelf_drawing_tab_renderer_new (ShelfItemsTab* the_tab);
ShelfDrawingTabRenderer* shelf_drawing_tab_renderer_construct (GType object_type, ShelfItemsTab* the_tab);
void shelf_drawing_tab_renderer_draw (ShelfDrawingTabRenderer* self, cairo_t* cr, gint position);
GType shelf_drawing_drawing_service_get_type (void) G_GNUC_CONST;
void shelf_drawing_drawing_service_average_color (GdkPixbuf* source, ShelfDrawingColor* result);
ShelfDrawingDrawingService* shelf_drawing_drawing_service_new (void);
ShelfDrawingDrawingService* shelf_drawing_drawing_service_construct (GType object_type);
GType shelf_widgets_struts_get_type (void) G_GNUC_CONST;
ShelfWidgetsDockWindow* shelf_widgets_dock_window_new (ShelfDockController* controller);
ShelfWidgetsDockWindow* shelf_widgets_dock_window_construct (GType object_type, ShelfDockController* controller);
void shelf_widgets_dock_window_update_size_and_position (ShelfWidgetsDockWindow* self);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_new (void);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_construct (GType object_type);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_new_with_type (GtkWindowType window_type);
ShelfWidgetsCompositedWindow* shelf_widgets_composited_window_construct_with_type (GType object_type, GtkWindowType window_type);

extern const GOptionEntry SHELF_FACTORIES_ABSTRACT_MAIN_options[3];

G_END_DECLS

#endif
